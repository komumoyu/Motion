--------------------------------------------------------------------------------
                    Notion Clone プロジェクト - データ概要説明書
--------------------------------------------------------------------------------

プロジェクト概要
・プロジェクト名: notion-clone
・機能: Notion風のドキュメント・データベース管理アプリ
・デプロイURL: https://motion-eight-lime.vercel.app/
・開発環境: Next.js 15 + TypeScript + Tailwind CSS

--------------------------------------------------------------------------------
データ保存先と外部サービス
--------------------------------------------------------------------------------

メインデータベース: Convex
・URL: https://shocking-oyster-440.convex.cloud
・役割: 全てのアプリケーションデータを保存
・特徴: リアルタイム同期、自動更新、コラボレーション対応
・保存データ:
  - ドキュメント（ページ、記事）
  - データベース構造とデータ
  - ユーザー設定
  - 表示設定（ビュー、フィルター）

認証システム: Clerk
・URL: https://classic-perch-9.clerk.accounts.dev
・役割: ユーザー認証とセッション管理
・機能:
  - ログイン・ログアウト
  - アカウント管理
  - セキュリティ保護

ファイルストレージ: EdgeStore
・URL: files.edgestore.dev
・役割: 画像・ファイルのアップロードと配信
・機能:
  - CDN経由の高速配信
  - 画像最適化
  - ファイル管理

ホスティング: Vercel
・URL: https://motion-eight-lime.vercel.app/
・役割: Webアプリケーションのホスティング
・機能:
  - 自動デプロイ
  - 高速配信
  - SSL証明書自動更新

--------------------------------------------------------------------------------
Convexデータベース構造
--------------------------------------------------------------------------------

documents テーブル - メインコンテンツ
・title: ドキュメントタイトル
・content: リッチテキスト内容
・type: "page" | "database" | "article"
・userId: 作成者ID
・parentDocument: 親ドキュメント（階層構造）
・isArchived: アーカイブ状態
・isPublished: 公開状態
・coverImage: カバー画像URL
・icon: アイコン設定

properties テーブル - データベースカラム定義
・databaseId: 所属データベースID
・name: カラム名
・type: データ型（text, number, select, date等）
・options: 選択肢（selectタイプの場合）
・order: 表示順序
・width: カラム幅

propertyValues テーブル - データベースセル値
・documentId: 行ID（ドキュメントID）
・propertyId: カラムID
・value: 実際の値（文字列、数値、配列等）

views テーブル - データベース表示設定
・databaseId: 対象データベースID
・name: ビュー名
・type: 表示タイプ（table, kanban, list）
・sortBy: ソート設定
・filterBy: フィルター設定
・isDefault: デフォルトビュー

embeddedDatabases テーブル - 埋め込みデータベース
・documentId: 埋め込み先ドキュメント
・databaseId: 埋め込むデータベース
・position: 埋め込み位置

--------------------------------------------------------------------------------
データフローとリアルタイム更新
--------------------------------------------------------------------------------

データ更新の流れ
1. ユーザーがエディタでデータを変更
2. フロントエンドからConvex APIに送信
3. Convexデータベースに保存
4. 接続中の全クライアントに自動通知
5. 他のユーザーの画面がリアルタイムで更新

ファイルアップロードの流れ
1. ユーザーがファイルを選択
2. EdgeStoreサーバーにアップロード
3. CDN URLが返される
4. URLをConvexデータベースに保存
5. 画像が高速表示される

認証フロー
1. ユーザーがログインページにアクセス
2. Clerkの認証システムで認証
3. JWTトークンが発行される
4. ConvexがトークンでユーザーIDを取得
5. ユーザー固有のデータにアクセス可能

--------------------------------------------------------------------------------
セキュリティとデータ保護
--------------------------------------------------------------------------------

データ分離
・各ユーザーは自分のデータのみアクセス可能
・userIdによる完全なデータ分離
・他ユーザーのデータは一切見えない

通信暗号化
・全てのAPI通信はHTTPS暗号化
・データベース接続も暗号化済み
・機密情報の保護

認証・認可
・Clerkによる堅牢な認証システム
・JWTトークンベースの認証
・セッション管理とタイムアウト

--------------------------------------------------------------------------------
技術スタック詳細
--------------------------------------------------------------------------------

フロントエンド
・Next.js 15 (React 19)
・TypeScript 5
・Tailwind CSS 4
・Radix UI (UIコンポーネント)
・BlockNote (リッチテキストエディタ)
・Zustand (状態管理)

バックエンド・データベース
・Convex (サーバーレス関数 + リアルタイムDB)
・Clerk (認証)
・EdgeStore (ファイルストレージ)

開発・デプロイ
・Vercel (ホスティング・CI/CD)
・GitHub (ソースコード管理)
・npm (パッケージ管理)

--------------------------------------------------------------------------------
環境設定情報
--------------------------------------------------------------------------------

本番環境
・NEXT_PUBLIC_CONVEX_URL=https://shocking-oyster-440.convex.cloud
・CONVEX_DEPLOYMENT=dev:shocking-oyster-440
・Clerk認証キー設定済み
・EdgeStoreアクセスキー設定済み

ローカル開発
・npm run dev でフロントエンド起動
・npx convex dev でバックエンド起動
・自動リロード・ホットリロード対応

--------------------------------------------------------------------------------
データバックアップと復旧
--------------------------------------------------------------------------------

自動バックアップ
・Convexが自動的にデータバックアップ
・EdgeStoreがファイルの冗長化保存
・Vercelがアプリケーションの継続性を保証

データ移行
・プロジェクトフォルダはPC上で自由に移動可能
・データはクラウドにあるため移動の影響なし
・設定ファイル（.env.local等）は一緒に移動すること

--------------------------------------------------------------------------------
主要な機能
--------------------------------------------------------------------------------

ドキュメント機能
・リッチテキストエディタ（BlockNote）
・階層的なページ構造
・リアルタイム協働編集
・カバー画像とアイコン設定

データベース機能
・表形式でのデータ管理
・カスタムプロパティ（カラム）
・複数ビュー（テーブル、カンバン等）
・ソート・フィルター機能

記事機能
・ブログ形式での記事作成
・公開設定
・メタデータ管理

その他
・ダークモード対応
・検索機能
・ファイルアップロード
・レスポンシブデザイン

--------------------------------------------------------------------------------

このプロジェクトは全てクラウドベースで構築されており、データの安全性と
リアルタイム性を重視した現代的なアーキテクチャを採用しています。