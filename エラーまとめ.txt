
【Convex + Clerk + SWR ビルドエラーと解決手順まとめ】

■ 発生した問題
Next.js 13+ + Clerk + SWR + Convex の構成で開発中、以下のエラーによりビルド・ランタイムが停止：

【エラー1】  
Build Error:  
`Export default doesn't exist in target module`  
→ swr@1 を使おうとしたが、Clerk の内部依存 (`@clerk/shared`) が `import swr from 'swr'` の形式で default export を要求。しかし swr@1 には default export が存在しない。

【エラー2】  
Runtime Error:  
`createContext only works in Client Components`  
→ `ConvexProvider` を Server Component に書いてしまっていた。

【エラー3】  
Runtime Error:  
`Could not find ConvexProviderWithAuth`  
→ `useConvexAuth()` を使ったが、上位に対応する Provider (`ConvexProviderWithAuth`) が存在しなかった。

---

■ 解決手順（最終的に動作した構成）

1. `@clerk/clerk-sdk`, `@clerk/nextjs`, `@clerk/shared` をすべてアンインストール（Clerk自体の使用を一旦停止）
```bash
npm uninstall @clerk/clerk-sdk @clerk/nextjs @clerk/shared --legacy-peer-deps
```

2. `node_modules` と `package-lock.json` を削除して再構築
```bash
rm -rf node_modules package-lock.json
npm install --legacy-peer-deps
```

3. `Navbar.tsx` の `useConvexAuth()` を一時的にコメントアウト（Providerが未設定のため）
```ts
// const { isAuthenticated, isLoading } = useConvexAuth()
```

4. `ConvexProvider` を Server Component で使用せず、Client Component に分離（未対応なら `use client` を追記）

---

■今後の注意点
- SWR v2 からは `export default` が無くなった。古いライブラリ（Clerk内部など）との互換性が崩れる。
- Convex の React フック（`useConvexAuth()` など）は `ConvexProviderWithAuth` の上にないと動かない。
- `ConvexProvider` 系は必ず `use client` をつけた Client Component 内に置くこと。

---
以上、再構築や再挑戦時に参照。

---

■ 補足対応

5. `Navbar.tsx` にて `SignUpButton` を使用していた箇所もコメントアウト  
（`Clerk` 依存を外したため使用不可になるため）

```tsx
{/* <SignUpButton mode="modal">
  <Button size="sm" variant="ghost">Get Started</Button>
</SignUpButton> */}
```

6. `ConvexProvider` 関連の導入が未完の状態で `useConvexAuth()` を使うとクラッシュするため、開発中は Provider 導入前に使用しないこと。  
実装済みの UI を先に整えたい場合は該当ロジックをすべてコメントアウトし、後から戻す方針が安全。


---

■ 再導入手順（Clerk + Convex + SWR 統合構成に戻す場合）
7. Clerk 関連パッケージの再インストール
```bash
npm install @clerk/clerk-react @clerk/nextjs
```
8. Convex Clerk 統合パッケージのインポートとプロバイダ設定
```tsx
// app/layout.tsx
"use client";

import { ClerkProvider } from "@clerk/nextjs";
import { ConvexProviderWithClerk } from "convex/react-clerk";
import { ConvexReactClient } from "convex/react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <ConvexProviderWithClerk client={convex}>
        {children}
      </ConvexProviderWithClerk>
    </ClerkProvider>
  );
}
```
9. `useConvexAuth()` や `SignUpButton` 等のコメントアウトを解除し、元のインポートを復活
```
- Ensure SWR v2 を維持しつつ、Clerk が内部的に依存しない構成を保つか、
- binary 模式で SWR v1 を別途エイリアス導入する等、バージョンを調整。
```

---

■ 2025年6月24日 成功した対処法

【問題の根本原因】
- 最新のClerkパッケージ（@clerk/clerk-react@5.32.0, @clerk/nextjs@6.23.0）は既にSWR v2に対応済み
- 古い情報に基づいてClerkを削除する必要はなかった

【実際の解決手順】

1. **必要なパッケージのインストール**
```bash
npm install @clerk/nextjs convex@latest --legacy-peer-deps
```

2. **Provider設定をClient Componentに分離**
- Server ComponentでmetadataとProviderを両方使えないため、Providersを別ファイルに分離

`components/providers/providers.tsx`:
```tsx
"use client";

import { ThemeProvider } from "./theme-provider";
import { ClerkProvider } from "@clerk/nextjs";
import { ConvexProviderWithClerk } from "convex/react-clerk";
import { ConvexReactClient } from "convex/react";
import { useAuth } from "@clerk/nextjs";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <ConvexProviderWithClerk client={convex} useAuth={useAuth}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
          storageKey="Motion-theme-2"
        >
          {children}
        </ThemeProvider>
      </ConvexProviderWithClerk>
    </ClerkProvider>
  );
}
```

`app/layout.tsx`:
```tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Providers } from "../components/providers/providers";

// ... フォント設定 ...

export const metadata: Metadata = {
  // ... メタデータ設定 ...
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
```

3. **Navbar.tsxの修正**
- `@clerk/clerk-react`ではなく`@clerk/nextjs`からインポート
- `SignUpButton`を`SignInButton`に修正（適切なコンポーネントを使用）
- `Link`をlucide-reactではなくnext/linkからインポート

```tsx
import { SignInButton } from "@clerk/nextjs";
import Link from "next/link";
```

4. **型エラーの修正**
- Spinnerコンポーネントにclassname propを追加
- ESLintエラーの修正（未使用変数の削除、空のインターフェースの修正）

5. **環境変数の確認**
`.env.local`に以下が設定されていることを確認：
```
NEXT_PUBLIC_CONVEX_URL=https://...
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...
```

【結果】
- SWR v2互換性問題は最新のClerkパッケージで解決済み
- ビルドエラーなし
- ランタイムエラーなし
- Convex + Clerk + SWRが正常に動作

【重要なポイント】
- 最新のClerkパッケージはSWR v2に対応しているため、特別な対処は不要
- ProviderはClient Componentに配置する必要がある
- Next.js App RouterではmetadataとClient Componentを同じファイルで使えない